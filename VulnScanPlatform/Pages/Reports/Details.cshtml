@page "{id:int}"
@model VulnScanPlatform.Pages.Reports.DetailsModel
@{
    ViewData["Title"] = Model.Report.Title;
}

<div class="container-fluid">
    <div class="row">
        <!-- Report Content -->
        <div class="col-lg-8 mb-4">
            <div class="card-modern">
                <div class="card-header bg-transparent border-0 p-4">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h3 class="mb-1">@Model.Report.Title</h3>
                            <div class="text-muted small">
                                <i class="fas fa-user me-1"></i>
                                <span>Creat de @Model.Report.CreatedBy.FullName</span>
                                <span class="mx-2">•</span>
                                <i class="fas fa-clock me-1"></i>
                                <span>@Model.Report.CreatedAt.ToString("dd MMMM yyyy, HH:mm")</span>
                            </div>
                        </div>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <a class="dropdown-item" href="#" onclick="window.print()">
                                        <i class="fas fa-print me-2"></i>Printează
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="#" onclick="downloadReport()">
                                        <i class="fas fa-download me-2"></i>Descarcă PDF
                                    </a>
                                </li>
                                @if (Model.IsOwner)
                                {
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <a class="dropdown-item text-danger" href="#" onclick="deleteReport()">
                                            <i class="fas fa-trash me-2"></i>Șterge Raport
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body p-4">
                    <div class="report-content">
                        @Html.Raw(Model.Report.Content)
                    </div>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Share & Collaborators -->
            <div class="card-modern mb-4">
                <div class="card-header bg-transparent border-0 p-4">
                    <h5 class="mb-0">
                        <i class="fas fa-users me-2"></i>Colaboratori
                    </h5>
                </div>
                <div class="card-body p-4">
                    @if (Model.IsOwner)
                    {
                        <form method="post" asp-page-handler="Invite" class="mb-4">
                            <div class="input-group">
                                <input type="email" name="email" class="form-control"
                                       placeholder="email@example.com" required />
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                            <small class="text-muted">Invită un utilizator să vadă acest raport</small>
                        </form>
                    }

                    <!-- Owner -->
                    <div class="collaborator-item mb-3">
                        <div class="d-flex align-items-center">
                            <div class="collaborator-avatar">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="flex-grow-1">
                                <h6 class="mb-0">@Model.Report.CreatedBy.FullName</h6>
                                <small class="text-muted">@Model.Report.CreatedBy.Email</small>
                            </div>
                            <span class="badge bg-primary">Owner</span>
                        </div>
                    </div>

                    <!-- Invited Users -->
                    @foreach (var invitation in Model.Invitations.Where(i => i.IsAccepted))
                    {
                        <div class="collaborator-item mb-3">
                            <div class="d-flex align-items-center">
                                <div class="collaborator-avatar">
                                    <i class="fas fa-user"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-0">@invitation.InvitedUser.FullName</h6>
                                    <small class="text-muted">@invitation.InvitedUser.Email</small>
                                </div>
                                @if (Model.IsOwner)
                                {
                                    <button class="btn btn-sm btn-outline-danger"
                                            onclick="removeCollaborator(@invitation.Id)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    }

                    <!-- Pending Invitations -->
                    @foreach (var invitation in Model.Invitations.Where(i => !i.IsAccepted))
                    {
                        <div class="collaborator-item mb-3 opacity-50">
                            <div class="d-flex align-items-center">
                                <div class="collaborator-avatar">
                                    <i class="fas fa-user-clock"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-0">@invitation.InvitedUserEmail</h6>
                                    <small class="text-muted">Invitație trimisă</small>
                                </div>
                                <span class="badge bg-warning">În așteptare</span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Chat -->
            <div class="card-modern">
                <div class="card-header bg-transparent border-0 p-4">
                    <h5 class="mb-0">
                        <i class="fas fa-comments me-2"></i>Discuții
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="chat-container" id="chatContainer">
                        @foreach (var message in Model.ChatMessages)
                        {
                            <div class="chat-message @(message.UserId == Model.CurrentUserId ? "chat-message-own" : "")">
                                <div class="chat-message-header">
                                    <strong>@message.User.FullName</strong>
                                    <small>@GetRelativeTime(message.CreatedAt)</small>
                                </div>
                                <div class="chat-message-content">
                                    @message.Message
                                </div>
                            </div>
                        }
                    </div>

                    <form method="post" asp-page-handler="SendMessage" class="chat-input-form">
                        <div class="input-group">
                            <input type="text" name="message" class="form-control"
                                   placeholder="Scrie un mesaj..." required autocomplete="off" />
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Pending Invitation Alert -->
@if (Model.HasPendingInvitation)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <i class="fas fa-envelope text-primary me-2"></i>
                <strong class="me-auto">Invitație Nouă</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                <p>Ai fost invitat să vezi acest raport!</p>
                <form method="post" asp-page-handler="AcceptInvitation">
                    <button type="submit" class="btn btn-sm btn-primary">
                        <i class="fas fa-check me-2"></i>Acceptă
                    </button>
                </form>
            </div>
        </div>
    </div>
}

@section Styles {
    <style>
        .report-content {
            font-size: 1.05rem;
            line-height: 1.7;
        }

            .report-content h3 {
                margin-top: 2rem;
                margin-bottom: 1rem;
                color: #2c3e50;
            }

            .report-content h4 {
                margin-top: 1.5rem;
                margin-bottom: 0.75rem;
                color: #34495e;
            }

        .collaborator-item {
            padding: 0.75rem;
            border-radius: 8px;
            background: rgba(0, 0, 0, 0.02);
        }

        .collaborator-avatar {
            width: 40px;
            height: 40px;
            background: var(--primary-gradient);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            margin-right: 1rem;
        }

        .chat-container {
            height: 400px;
            overflow-y: auto;
            padding: 1rem;
            background: #f8f9fa;
        }

        .chat-message {
            margin-bottom: 1rem;
            padding: 0.75rem;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .chat-message-own {
            background: rgba(102, 126, 234, 0.1);
            margin-left: 2rem;
        }

        .chat-message-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.25rem;
            font-size: 0.85rem;
        }

            .chat-message-header small {
                color: #6c757d;
            }

        .chat-message-content {
            color: #495057;
        }

        .chat-input-form {
            padding: 1rem;
            background: white;
            border-top: 1px solid #dee2e6;
        }
    </style>
}

@section Scripts {
    <script>
        // Auto-scroll chat to bottom
        const chatContainer = document.getElementById('chatContainer');
        chatContainer.scrollTop = chatContainer.scrollHeight;

        // Real-time chat updates (would use SignalR in production)
        setInterval(function() {
            // Check for new messages
            fetch(`/Reports/Details/@Model.Report.Id?handler=NewMessages&lastMessageId=${getLastMessageId()}`)
                .then(response => response.json())
                .then(data => {
                    if (data.messages && data.messages.length > 0) {
                        appendNewMessages(data.messages);
                    }
                });
        }, 3000);

        function getLastMessageId() {
            const messages = document.querySelectorAll('.chat-message');
            return messages.length > 0 ? messages[messages.length - 1].dataset.messageId || 0 : 0;
        }

        function appendNewMessages(messages) {
            messages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `chat-message ${msg.isOwn ? 'chat-message-own' : ''}`;
                messageDiv.innerHTML = `
                    <div class="chat-message-header">
                        <strong>${msg.userName}</strong>
                        <small>${msg.time}</small>
                    </div>
                    <div class="chat-message-content">${msg.message}</div>
                `;
                chatContainer.appendChild(messageDiv);
            });
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        function removeCollaborator(invitationId) {
            if (confirm('Ești sigur că vrei să elimini acest colaborator?')) {
                fetch(`/Reports/Details/@Model.Report.Id?handler=RemoveCollaborator`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ invitationId: invitationId })
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    }
                });
            }
        }

        function downloadReport() {
            alert('Funcționalitate în dezvoltare - Export PDF');
        }

        function deleteReport() {
            if (confirm('Ești sigur că vrei să ștergi acest raport? Acțiunea nu poate fi anulată.')) {
                // Submit delete form
            }
        }
    </script>
}

@functions {
    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "Chiar acum";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}z";

        return dateTime.ToString("dd MMM");
    }
}